!function(){"use strict";const t=t=>{const e=new Date,o=new Date(t),r=Math.floor((e.getTime()-o.getTime())/1e3);return((t,e=!0)=>{const o=new Intl.RelativeTimeFormat("en",{numeric:"auto"}),r=e?-1:1;if(t<60)return o.format(t*r,"second");const n=Math.floor(t/60);if(n<60)return o.format(n*r,"minute");const a=Math.floor(n/60);if(a<24)return o.format(a*r,"hour");const s=Math.floor(a/24);if(s<30)return o.format(s*r,"day");const c=Math.floor(s/30);if(c<12)return o.format(c*r,"month");const f=Math.floor(s/365);return o.format(f*r,"year")})(Math.abs(r),r>0)},e=e=>{const o=e.currentTarget;o&&(o.title=t(o.dateTime))},o=t=>{const o=t.querySelector("time");o&&o.addEventListener("mouseenter",e)},r=()=>{((t,e)=>{if(t.length<1)return;const o=new IntersectionObserver(((t,o)=>{t.forEach((t=>{if(t.isIntersecting&&1===t.target.nodeType){for(const o of e)o(t.target);console.log("Finished parsing",t.target),o.unobserve(t.target)}}))}),{root:null,rootMargin:"0px",threshold:.1});t.forEach((t=>o.observe(t)))})(document.querySelectorAll("body > form[name='postcontrols'] .thread .post:not(.hidden)"),[o])};try{((t,e)=>{for(const o of[e].flat())if(o)return void t();document.addEventListener("DOMContentLoaded",(()=>t()))})(r,"body > form[name='post']")}catch(t){console.log("[posts-addon]",t)}}();
//# sourceMappingURL=posts-addon.js.map
